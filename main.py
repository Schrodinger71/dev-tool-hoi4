import customtkinter as ctk
from tkinter import filedialog, messagebox
import os, re, json, sys
from tkinter import simpledialog

# ---------- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã ----------
if getattr(sys, 'frozen', False):
    BASE_DIR = os.path.dirname(sys.executable)
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

APP_NAME = os.path.basename(BASE_DIR)
CONFIG_PATH = os.path.join(BASE_DIR, "config", "settings.json")

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
def load_settings():
    if os.path.exists(CONFIG_PATH):
        try:
            with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
            return data.get("game_path", "")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", e)
    return ""

def save_settings(game_path):
    os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump({"game_path": game_path}, f, indent=4, ensure_ascii=False)

def get_game_path_from_config(config_path=CONFIG_PATH):
    """
    –ß–∏—Ç–∞–µ—Ç –ø—É—Ç—å –∫ –∏–≥—Ä–µ Hearts of Iron IV –∏–∑ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—É—Ç–µ–º, –ª–∏–±–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    if not os.path.exists(config_path):
        print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return ""

    try:
        with open(config_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        game_path = data.get("game_path", "")
        if game_path and os.path.exists(game_path):
            return game_path
        else:
            print("–ü—É—Ç—å –∫ –∏–≥—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return ""


# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def browse_game_path():
    path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å Hearts of Iron IV")
    if path:
        game_path_var.set(path)
        save_settings(path)

def browse_mod_file():
    file_path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ .mod —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞",
        filetypes=[("Hearts of Iron IV Mod File", "*.mod")]
    )
    if file_path:
        mod_file_var.set(file_path)
        extract_mod_path(file_path)

def extract_mod_path(mod_file):
    with open(mod_file, "r", encoding="utf-8") as f:
        content = f.read()
    match = re.search(r'path="(.+?)"', content)
    if match:
        mod_path_var.set(match.group(1))
    else:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –º–æ–¥—É –≤ —Ñ–∞–π–ª–µ .mod")

# ---------- –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã ----------
def open_country_creator():
    if not mod_path_var.get():
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ .mod —Ñ–∞–π–ª!")
        return

    win = ctk.CTkToplevel(root)
    win.title("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
    win.geometry("520x640")
    win.transient(root)
    win.grab_set()
    win.focus_force()

    tag_var = ctk.StringVar()
    name_var = ctk.StringVar()
    color_var = ctk.StringVar(value="255 0 0")
    gfx_var = ctk.StringVar(value="–ó–∞–ø–∞–¥–Ω–æ-–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è")
    r_var, g_var, b_var = ctk.IntVar(value=255), ctk.IntVar(value=0), ctk.IntVar(value=0)

    gfx_options = {
        "–í–æ—Å—Ç–æ—á–Ω–æ-–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è": ("eastern_european_gfx", "eastern_european_2d"),
        "–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—è": ("african_gfx", "african_2d"),
        "–ë–ª–∏–∂–Ω–µ–≤–æ—Å—Ç–æ—á–Ω–∞—è": ("middle_eastern_gfx", "middle_eastern_2d"),
        "–ê–∑–∏–∞—Ç—Å–∫–∞—è": ("asian_gfx", "asian_2d"),
        "–Æ–∂–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è": ("southamerican_gfx", "southamerican_2d"),
        "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è": ("commonwealth_gfx", "commonwealth_2d"),
        "–ó–∞–ø–∞–¥–Ω–æ-–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è": ("western_european_gfx", "western_european_2d"),
    }

    def update_color_preview(*_):
        r, g, b = r_var.get(), g_var.get(), b_var.get()
        color_preview.configure(fg_color=f"#{r:02x}{g:02x}{b:02x}")
        color_var.set(f"{r} {g} {b}")

    def create_country():
        tag, name, color, gfx_choice = tag_var.get().upper(), name_var.get(), color_var.get(), gfx_var.get()
        if not (tag and name):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –ø–æ–ª—è!")
            return

        mod_path = mod_path_var.get()
        gfx_3d, gfx_2d = gfx_options[gfx_choice]
        os.makedirs(os.path.join(mod_path, "common", "countries"), exist_ok=True)
        os.makedirs(os.path.join(mod_path, "history", "countries"), exist_ok=True)
        os.makedirs(os.path.join(mod_path, "common", "country_tags"), exist_ok=True)

        with open(os.path.join(mod_path, "common", "countries", f"{name}.txt"), "w", encoding="utf-8") as f:
            f.write(f"graphical_culture = {gfx_3d}\n")
            f.write(f"graphical_culture_2d = {gfx_2d}\n")
            f.write(f"color = {{ {color} }}\n")

        with open(os.path.join(mod_path, "history", "countries", f"{tag} - {name}.txt"), "w", encoding="utf-8") as f:
            f.write("capital = 1\nset_research_slots = 3\n")

        with open(os.path.join(mod_path, "common", "countries", "colors.txt"), "a", encoding="utf-8") as f:
            f.write(f"\n{tag} = {{ color = rgb {{ {color} }} color_ui = rgb {{ {color} }} }}\n")

        with open(os.path.join(mod_path, "common", "country_tags", "02_countries.txt"), "a", encoding="utf-8") as f:
            f.write(f"{tag} = \"countries/{name}.txt\"\n")

        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {name} ({tag})!")
        win.destroy()

    # ---------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ----------
    frame = ctk.CTkFrame(win, corner_radius=10)
    frame.pack(fill="both", expand=True, padx=20, pady=20)

    font_label = ("Arial", 13)
    font_entry = ("Arial", 13)

    ctk.CTkLabel(frame, text="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã", font=("Arial", 18, "bold")).pack(pady=10)

    ctk.CTkLabel(frame, text="TAG —Å—Ç—Ä–∞–Ω—ã (3 –±—É–∫–≤—ã):", font=font_label).pack(pady=3)
    ctk.CTkEntry(frame, textvariable=tag_var, width=200, font=font_entry).pack()

    ctk.CTkLabel(frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:", font=font_label).pack(pady=3)
    ctk.CTkEntry(frame, textvariable=name_var, width=300, font=font_entry).pack()

    ctk.CTkLabel(frame, text="–¶–≤–µ—Ç —Å—Ç—Ä–∞–Ω—ã (RGB):", font=font_label).pack(pady=10)
    color_preview = ctk.CTkFrame(frame, width=100, height=30, fg_color="#ff0000")
    color_preview.pack(pady=5)

    for label, var in [("R", r_var), ("G", g_var), ("B", b_var)]:
        row = ctk.CTkFrame(frame)
        row.pack(fill="x", padx=20, pady=2)
        ctk.CTkLabel(row, text=label, width=20, font=font_label).pack(side="left")
        ctk.CTkSlider(row, from_=0, to=255, variable=var, command=update_color_preview).pack(fill="x", expand=True)

    ctk.CTkEntry(frame, textvariable=color_var, justify="center", font=font_entry, state="readonly").pack(pady=5)

    ctk.CTkLabel(frame, text="–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞:", font=font_label).pack(pady=10)
    ctk.CTkComboBox(frame, values=list(gfx_options.keys()), variable=gfx_var, width=250, font=font_entry).pack(pady=5)

    ctk.CTkButton(frame, text="–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω—É", command=create_country, height=40,
                  fg_color="#4CAF50", hover_color="#45A049", font=("Arial", 14, "bold")).pack(pady=20)

    update_color_preview()


def find_localization_id():
    if not mod_path_var.get():
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ .mod —Ñ–∞–π–ª!")
        return
    
    query = simpledialog.askstring("–ü–æ–∏—Å–∫ ID", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:")
    if not query:
        return

    results = []

    game_path_var = get_game_path_from_config()
    if game_path_var:
        loc_dir = os.path.join(game_path_var, "localisation")

    for root_dir, _, files in os.walk(loc_dir):
        for file in files:
            if file.endswith(".yml"):
                file_path = os.path.join(root_dir, file)
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        for i, line in enumerate(f, 1):
                            # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                            clean_line = line.split("#")[0].strip()
                            if query.lower() in clean_line.lower():  # –ø–æ–∏—Å–∫ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                                results.append(f"{clean_line} ‚Äî {file_path} (—Å—Ç—Ä–æ–∫–∞ {i})")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")

    if results:
        win = ctk.CTkToplevel(root)
        win.title(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {query}")
        win.geometry("700x400")
        text = ctk.CTkTextbox(win, wrap="none")
        text.pack(fill="both", expand=True, padx=10, pady=10)
        text.insert("0.0", "\n".join(results))
        text.configure(state="disabled")
    else:
        messagebox.showinfo("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# ---------- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ----------
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

root = ctk.CTk()
root.title(f"HOI4 Modding Tool ‚Äî {APP_NAME} ‚Äî by üí¢üñ§Schr√∂dinger's Cutieüñ§üëæ")
root.geometry("750x480")

game_path_var = ctk.StringVar(value=load_settings())
mod_file_var = ctk.StringVar()
mod_path_var = ctk.StringVar()

font_label = ("Arial", 13)
font_entry = ("Arial", 13)

# ---------- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ----------
frame = ctk.CTkFrame(root, corner_radius=12)
frame.pack(fill="both", expand=True, padx=20, pady=20)

ctk.CTkLabel(frame, text="HOI4 Modding Tool", font=("Arial", 20, "bold")).grid(row=0, column=0, columnspan=3, pady=(10, 5))
ctk.CTkLabel(frame, text="by üí¢üñ§Schr√∂dinger's Cutieüñ§üëæ", font=("Arial", 12, "italic")).grid(row=1, column=0, columnspan=3, pady=(0, 15))

# –ü—É—Ç—å –∫ –∏–≥—Ä–µ
ctk.CTkLabel(frame, text="–ü—É—Ç—å –∫ –∏–≥—Ä–µ:", font=font_label).grid(row=2, column=0, sticky="w", padx=10, pady=5)
ctk.CTkEntry(frame, textvariable=game_path_var, width=450, font=font_entry).grid(row=2, column=1, pady=5)
ctk.CTkButton(frame, text="–û–±–∑–æ—Ä", width=80, command=browse_game_path).grid(row=2, column=2, padx=5)

# .mod —Ñ–∞–π–ª
ctk.CTkLabel(frame, text="–§–∞–π–ª .mod:", font=font_label).grid(row=3, column=0, sticky="w", padx=10, pady=5)
ctk.CTkEntry(frame, textvariable=mod_file_var, width=450, font=font_entry).grid(row=3, column=1, pady=5)
ctk.CTkButton(frame, text="–û–±–∑–æ—Ä", width=80, command=browse_mod_file).grid(row=3, column=2, padx=5)

# –ü–∞–ø–∫–∞ –º–æ–¥–∞
ctk.CTkLabel(frame, text="–ü–∞–ø–∫–∞ –º–æ–¥–∞:", font=font_label).grid(row=4, column=0, sticky="w", padx=10, pady=5)
ctk.CTkEntry(frame, textvariable=mod_path_var, width=550, state="readonly", font=font_entry).grid(row=4, column=1, columnspan=2, pady=5, padx=5)

# –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
bottom = ctk.CTkFrame(frame)
bottom.grid(row=5, column=0, columnspan=3, pady=25)
ctk.CTkButton(bottom, text="–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω—É", command=open_country_creator,
              fg_color="#4CAF50", hover_color="#45A049", width=200, height=40, font=("Arial", 14, "bold")).pack(side="left", padx=10)
ctk.CTkButton(bottom, text="–ù–∞–π—Ç–∏ ID –ø–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏", command=find_localization_id,
              fg_color="#2196F3", hover_color="#1976D2", width=200, height=40, font=("Arial", 14, "bold")).pack(side="left", padx=10)
ctk.CTkButton(bottom, text="(–ó–∞–≥–æ—Ç–æ–≤–∫–∞)", width=200, height=40, font=("Arial", 14, "bold")).pack(side="left", padx=10)

frame.grid_columnconfigure(1, weight=1)
root.mainloop()
